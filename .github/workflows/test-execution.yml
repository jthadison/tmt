name: Test Execution Engine

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'execution-engine/**'
      - 'test-execution-engine.py'
      - 'tests/test_execution_engine_comprehensive.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'execution-engine/**'
  workflow_dispatch:

jobs:
  test-execution-engine:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp pytest pytest-asyncio

    - name: Start execution engine service
      run: |
        cd execution-engine
        python simple_main.py &
        sleep 5  # Give service time to start

    - name: Run execution engine critical bug test
      run: |
        python test-execution-engine.py
      continue-on-error: false  # Fail the workflow if test fails

    - name: Run comprehensive execution engine tests
      run: |
        python tests/test_execution_engine_comprehensive.py
      continue-on-error: false

    - name: Check for units_int bug
      run: |
        # Specific check for the critical bug we found
        if python test-execution-engine.py 2>&1 | grep -q "units_int"; then
          echo "‚ùå CRITICAL BUG DETECTED: units_int error found!"
          echo "This bug prevents all trades from executing."
          exit 1
        else
          echo "‚úÖ No units_int bug detected"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results/
          *.log

  run-full-test-suite:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test-execution-engine

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start all services
      run: |
        # Start core services
        cd orchestrator && PORT=8089 python -m app.main &
        cd execution-engine && PORT=8082 python simple_main.py &
        cd agents/market-analysis && PORT=8001 python simple_main.py &
        cd agents/pattern-detection && PORT=8008 python app/main.py &
        sleep 10  # Give services time to start

    - name: Run complete test suite
      run: |
        python run_all_tests.py

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const testResults = fs.readFileSync('test-results.txt', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üß™ Test Results\n\n\`\`\`\n${testResults}\n\`\`\``
          });