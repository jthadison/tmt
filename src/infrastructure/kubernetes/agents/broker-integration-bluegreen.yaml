# Blue-Green Deployment Configuration for Broker Integration
# This configuration supports zero-downtime deployments using Argo Rollouts

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: broker-integration-rollout
  namespace: tmt-production
  labels:
    app: broker-integration
    deployment-strategy: blue-green
spec:
  replicas: 3
  strategy:
    blueGreen:
      activeService: broker-integration-active
      previewService: broker-integration-preview
      autoPromotionEnabled: false  # Manual promotion for safety
      scaleDownDelaySeconds: 30
      prePromotionAnalysis:
        templates:
        - templateName: success-rate
        args:
        - name: service-name
          value: broker-integration-preview.tmt-production.svc.cluster.local
      postPromotionAnalysis:
        templates:
        - templateName: success-rate
        args:
        - name: service-name
          value: broker-integration-active.tmt-production.svc.cluster.local
      promotionPolicy:
        steps:
        - setWeight: 50
        - pause: {duration: 30s}
        - setWeight: 100
        - pause: {duration: 60s}
  selector:
    matchLabels:
      app: broker-integration
  template:
    metadata:
      labels:
        app: broker-integration
        component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: broker-integration-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: broker-service
        image: tmt/broker-integration:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: VAULT_ADDR
          valueFrom:
            configMapKeyRef:
              name: broker-integration-config
              key: vault_addr
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: broker-integration-secrets
              key: vault_token
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: broker-integration-data
---
apiVersion: v1
kind: Service
metadata:
  name: broker-integration-active
  namespace: tmt-production
  labels:
    app: broker-integration
    service-type: active
spec:
  type: ClusterIP
  selector:
    app: broker-integration
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: broker-integration-preview
  namespace: tmt-production
  labels:
    app: broker-integration
    service-type: preview
spec:
  type: ClusterIP
  selector:
    app: broker-integration
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: tmt-production
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 30s
    count: 5
    successCondition: result[0] >= 0.95
    failureLimit: 2
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(irate(broker_requests_total{job="broker-integration",code!~"5.."}[5m])) /
          sum(irate(broker_requests_total{job="broker-integration"}[5m]))
  - name: avg-response-time
    interval: 30s
    count: 5
    successCondition: result[0] <= 1.0
    failureLimit: 2
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          histogram_quantile(0.95, 
            sum(rate(broker_request_duration_seconds_bucket{job="broker-integration"}[5m])) by (le)
          )
---
# Blue-Green Deployment Script
apiVersion: v1
kind: ConfigMap
metadata:
  name: bluegreen-deploy-script
  namespace: tmt-production
  labels:
    app: broker-integration
data:
  deploy.sh: |
    #!/bin/bash
    set -euo pipefail
    
    NEW_IMAGE=${1:-""}
    TIMEOUT=${2:-"600"}
    
    if [ -z "$NEW_IMAGE" ]; then
        echo "Usage: $0 <new-image> [timeout-seconds]"
        exit 1
    fi
    
    echo "Starting blue-green deployment for broker-integration"
    echo "New image: $NEW_IMAGE"
    echo "Timeout: $TIMEOUT seconds"
    
    # Update the rollout with new image
    kubectl patch rollout broker-integration-rollout -n tmt-production \
        -p '{"spec":{"template":{"spec":{"containers":[{"name":"broker-service","image":"'$NEW_IMAGE'"}]}}}}'
    
    # Wait for rollout to be ready
    echo "Waiting for rollout to be ready..."
    kubectl rollout status rollout/broker-integration-rollout -n tmt-production --timeout=${TIMEOUT}s
    
    # Run pre-deployment tests on preview service
    echo "Running health checks on preview service..."
    PREVIEW_URL="http://broker-integration-preview.tmt-production.svc.cluster.local"
    
    for i in {1..5}; do
        if curl -f "$PREVIEW_URL/health" > /dev/null 2>&1; then
            echo "Health check $i/5 passed"
        else
            echo "Health check $i/5 failed"
            exit 1
        fi
        sleep 10
    done
    
    # Check metrics are being generated
    if curl -f "$PREVIEW_URL:9090/metrics" | grep -q "broker_requests_total"; then
        echo "Metrics endpoint is healthy"
    else
        echo "Metrics endpoint failed"
        exit 1
    fi
    
    echo "Pre-deployment checks passed. Review the preview environment:"
    echo "  kubectl get pods -n tmt-production -l app=broker-integration"
    echo "  kubectl logs -n tmt-production -l app=broker-integration --tail=50"
    echo ""
    echo "To promote to production, run:"
    echo "  kubectl argo rollouts promote broker-integration-rollout -n tmt-production"
    echo ""
    echo "To abort deployment, run:"
    echo "  kubectl argo rollouts abort broker-integration-rollout -n tmt-production"
    
  promote.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Promoting broker-integration to production..."
    
    # Promote the rollout
    kubectl argo rollouts promote broker-integration-rollout -n tmt-production
    
    # Wait for promotion to complete
    kubectl rollout status rollout/broker-integration-rollout -n tmt-production --timeout=300s
    
    echo "Blue-green deployment completed successfully!"
    
  abort.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "Aborting broker-integration deployment..."
    
    # Abort the rollout
    kubectl argo rollouts abort broker-integration-rollout -n tmt-production
    
    # Wait for rollback to complete
    kubectl rollout status rollout/broker-integration-rollout -n tmt-production --timeout=300s
    
    echo "Deployment aborted and rolled back successfully!"