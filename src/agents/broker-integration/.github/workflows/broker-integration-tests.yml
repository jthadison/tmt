name: Broker Integration Testing Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/agents/broker-integration/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/agents/broker-integration/**'
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # Unit Tests with Coverage
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run unit tests with coverage
      working-directory: src/agents/broker-integration
      run: |
        poetry run pytest tests/test_comprehensive_unit_suite.py \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=90 \
          --junitxml=test-results-unit.xml \
          -v
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/agents/broker-integration/coverage.xml
        flags: unit-tests
        name: broker-integration-unit-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          src/agents/broker-integration/test-results-unit.xml
          src/agents/broker-integration/htmlcov/

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run integration tests
      working-directory: src/agents/broker-integration
      env:
        # Only run non-live integration tests in CI
        OANDA_PRACTICE_API_KEY: ${{ secrets.OANDA_PRACTICE_API_KEY }}
        OANDA_PRACTICE_ACCOUNT_ID: ${{ secrets.OANDA_PRACTICE_ACCOUNT_ID }}
      run: |
        poetry run pytest tests/test_integration_framework.py::TestIntegrationFramework \
          --junitxml=test-results-integration.xml \
          -v
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: src/agents/broker-integration/test-results-integration.xml

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run performance tests
      working-directory: src/agents/broker-integration
      run: |
        poetry run pytest tests/test_performance_suite.py \
          --junitxml=test-results-performance.xml \
          --tb=short \
          -v
          
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: src/agents/broker-integration/test-results-performance.xml

  # Compliance Tests
  compliance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run compliance tests
      working-directory: src/agents/broker-integration
      run: |
        poetry run pytest tests/test_compliance_scenarios.py \
          --junitxml=test-results-compliance.xml \
          -v
          
    - name: Upload compliance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-test-results
        path: src/agents/broker-integration/test-results-compliance.xml

  # Failure Injection Tests
  failure-injection-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run failure injection tests
      working-directory: src/agents/broker-integration
      run: |
        poetry run pytest tests/test_failure_injection.py \
          --junitxml=test-results-failure-injection.xml \
          -v
          
    - name: Upload failure injection test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: failure-injection-test-results
        path: src/agents/broker-integration/test-results-failure-injection.xml

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [integration-tests, performance-tests, compliance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run end-to-end tests
      working-directory: src/agents/broker-integration
      run: |
        poetry run pytest tests/test_end_to_end_automation.py \
          --junitxml=test-results-e2e.xml \
          -v
          
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: src/agents/broker-integration/test-results-e2e.xml

  # Comprehensive Test Suite Runner
  comprehensive-test-suite:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [unit-tests, integration-tests, performance-tests, compliance-tests, failure-injection-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts
        
    - name: Run comprehensive test suite
      working-directory: src/agents/broker-integration
      env:
        OANDA_PRACTICE_API_KEY: ${{ secrets.OANDA_PRACTICE_API_KEY }}
        OANDA_PRACTICE_ACCOUNT_ID: ${{ secrets.OANDA_PRACTICE_ACCOUNT_ID }}
      run: |
        poetry run python tests/ci_cd_test_runner.py \
          --test-types unit integration performance compliance e2e \
          --coverage-threshold 90 \
          --performance-threshold 100 \
          --output-file comprehensive-test-report.json
          
    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-test-report
        path: src/agents/broker-integration/comprehensive-test-report.json
        
    - name: Generate test summary
      if: always()
      working-directory: src/agents/broker-integration
      run: |
        echo "## 🧪 Broker Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f comprehensive-test-report.json ]; then
          python -c "
import json
with open('comprehensive-test-report.json', 'r') as f:
    report = json.load(f)
    
summary = report.get('summary', {})
quality_gates = report.get('quality_gates', {})
ci_cd_status = report.get('ci_cd_status', 'UNKNOWN')

print(f'**Overall Status:** {ci_cd_status}')
print(f'**Success Rate:** {summary.get(\"success_rate\", 0):.1f}%')
print(f'**Total Tests:** {summary.get(\"total_tests\", 0)}')
print(f'**Duration:** {summary.get(\"total_duration_seconds\", 0):.1f}s')
print('')
print('### Quality Gates')
for gate, passed in quality_gates.items():
    status = '✅' if passed else '❌'
    print(f'- {status} {gate.replace(\"_\", \" \").title()}')
print('')

if 'recommendations' in report:
    print('### Recommendations')
    for rec in report['recommendations']:
        print(f'- {rec}')
" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Check test results and fail if necessary
      if: always()
      working-directory: src/agents/broker-integration
      run: |
        if [ -f comprehensive-test-report.json ]; then
          CI_CD_STATUS=$(python -c "import json; print(json.load(open('comprehensive-test-report.json'))['ci_cd_status'])")
          if [ "$CI_CD_STATUS" != "PASS" ]; then
            echo "❌ Test suite failed - CI/CD status: $CI_CD_STATUS"
            exit 1
          else
            echo "✅ Test suite passed - CI/CD status: $CI_CD_STATUS"
          fi
        else
          echo "❌ No test report found - assuming failure"
          exit 1
        fi

  # Security and Code Quality Checks
  security-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      working-directory: src/agents/broker-integration
      run: |
        poetry install --with dev,test
        
    - name: Run security checks with bandit
      working-directory: src/agents/broker-integration
      run: |
        poetry run bandit -r . -f json -o bandit-report.json || true
        
    - name: Run code quality checks with flake8
      working-directory: src/agents/broker-integration
      run: |
        poetry run flake8 . --output-file=flake8-report.txt --exit-zero
        
    - name: Upload security and quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-quality-reports
        path: |
          src/agents/broker-integration/bandit-report.json
          src/agents/broker-integration/flake8-report.txt

  # Deploy to Staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: comprehensive-test-suite
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying broker integration to staging environment"
        # Add actual deployment steps here
        echo "Deployment completed successfully"