version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:2.14.2-pg15
    container_name: trading-postgres
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/shared/schemas/migrations:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and real-time state
  redis:
    image: redis:7.2.4-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Apache Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: trading-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - trading-network
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: trading-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Financial-grade reliability settings
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 104857600
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      # Performance optimization for <10ms latency
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 2
      # Enable exactly-once semantics
      KAFKA_ENABLE_IDEMPOTENCE: 'true'
      KAFKA_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 5
      KAFKA_RETRIES: 2147483647
      KAFKA_REQUEST_TIMEOUT_MS: 30000
      # JVM heap settings for optimal performance
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
    networks:
      - trading-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.15.6
    container_name: trading-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-token-trading-system
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.54
    container_name: trading-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
      COLLECTOR_ZIPKIN_HOST_PORT: ':9411'
      SPAN_STORAGE_TYPE: memory
      LOG_LEVEL: info
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:14269/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./src/infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:10.3.3
    container_name: trading-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./src/infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trading-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: trading-alertmanager
    ports:
      - "9094:9093"
    volumes:
      - ./src/infrastructure/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9094'
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard (Next.js) - Development mode
  dashboard:
    build:
      context: ./src/dashboard
      dockerfile: Dockerfile.dev
      target: development
    container_name: trading-dashboard
    ports:
      - "3000:3000"
    volumes:
      - ./src/dashboard:/app
      - /app/node_modules
      - /app/.next
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/trading_system
      REDIS_URL: redis://redis:6379
      # OANDA Configuration
      NEXT_PUBLIC_OANDA_API_KEY: 375f337dd8502af3307ce9179f7a373a-48f35175b87682feea1f057950810a09
      NEXT_PUBLIC_OANDA_ACCOUNT_IDS: 101-001-21040028-001
      NEXT_PUBLIC_OANDA_API_URL: https://api-fxpractice.oanda.com
      NEXT_PUBLIC_OANDA_STREAM_URL: https://stream-fxpractice.oanda.com
      NEXT_PUBLIC_OANDA_ENVIRONMENT: practice
      NEXT_PUBLIC_OANDA_RATE_LIMIT: 100
      NEXT_PUBLIC_OANDA_RATE_WINDOW: 60000
      NEXT_PUBLIC_OANDA_RETRY_ATTEMPTS: 3
      NEXT_PUBLIC_OANDA_RETRY_DELAY: 1000
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./src/dashboard
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: ./src/dashboard/package.json

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zk_data:
  zk_logs:
  prometheus_data:
  grafana_data:
  alertmanager_data: