"""
SQLAlchemy ORM models for trading system database.

Defines tables for trades, signals, performance snapshots, and parameter history
with proper relationships, constraints, and indexes.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Optional

from sqlalchemy import (
    Integer, String, DateTime, Boolean, Text, CheckConstraint,
    Index, ForeignKey, Numeric
)
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .connection import Base


class Trade(Base):
    """
    Trade execution records with full P&L tracking.

    Stores all trade execution details including entry/exit prices,
    stop loss, take profit, position size, P&L, and session information.
    """

    __tablename__ = "trades"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Trade identification
    trade_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False, index=True)
    signal_id: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    account_id: Mapped[str] = mapped_column(String(255), nullable=False)

    # Trade details
    symbol: Mapped[str] = mapped_column(String(50), nullable=False)
    direction: Mapped[str] = mapped_column(
        String(10),
        CheckConstraint("direction IN ('BUY', 'SELL')"),
        nullable=False
    )

    # Entry information
    entry_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)
    entry_price: Mapped[Decimal] = mapped_column(Numeric(10, 5), nullable=False)

    # Exit information (nullable until trade closes)
    exit_time: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    exit_price: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)

    # Risk management
    stop_loss: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)
    take_profit: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)
    position_size: Mapped[Decimal] = mapped_column(Numeric(15, 2), nullable=False)

    # Performance metrics
    pnl: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 2), nullable=True)
    pnl_percentage: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)

    # Trading context
    session: Mapped[Optional[str]] = mapped_column(
        String(20),
        CheckConstraint("session IN ('TOKYO', 'LONDON', 'NY', 'SYDNEY', 'OVERLAP') OR session IS NULL"),
        nullable=True
    )
    pattern_type: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)
    confidence_score: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    risk_reward_ratio: Mapped[Optional[Decimal]] = mapped_column(Numeric(4, 2), nullable=True)

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc)
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc)
    )

    # Indexes
    __table_args__ = (
        Index("idx_trades_symbol_time", "symbol", "entry_time"),
        Index("idx_trades_session", "session"),
        Index("idx_trades_pattern", "pattern_type"),
    )

    def __repr__(self) -> str:
        return f"<Trade(trade_id={self.trade_id}, symbol={self.symbol}, direction={self.direction}, pnl={self.pnl})>"


class Signal(Base):
    """
    Trading signal generation history.

    Tracks all signals generated by the market analysis agent,
    including execution status and signal parameters.
    """

    __tablename__ = "signals"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Signal identification
    signal_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False, index=True)

    # Signal details
    symbol: Mapped[str] = mapped_column(String(50), nullable=False)
    timeframe: Mapped[Optional[str]] = mapped_column(String(20), nullable=True)
    signal_type: Mapped[str] = mapped_column(
        String(10),
        CheckConstraint("signal_type IN ('BUY', 'SELL')"),
        nullable=False
    )
    confidence: Mapped[Decimal] = mapped_column(Numeric(5, 2), nullable=False)

    # Price levels
    entry_price: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)
    stop_loss: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)
    take_profit: Mapped[Optional[Decimal]] = mapped_column(Numeric(10, 5), nullable=True)

    # Trading context
    session: Mapped[Optional[str]] = mapped_column(
        String(20),
        CheckConstraint("session IN ('TOKYO', 'LONDON', 'NY', 'SYDNEY', 'OVERLAP') OR session IS NULL"),
        nullable=True
    )
    pattern_type: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)

    # Signal metadata
    generated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)
    executed: Mapped[bool] = mapped_column(Boolean, nullable=False, default=False)
    execution_status: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc)
    )

    # Indexes
    __table_args__ = (
        Index("idx_signals_generated_at", "generated_at"),
    )

    def __repr__(self) -> str:
        return f"<Signal(signal_id={self.signal_id}, symbol={self.symbol}, signal_type={self.signal_type}, executed={self.executed})>"


class PerformanceSnapshot(Base):
    """
    Periodic performance metrics snapshots.

    Captures system performance metrics at regular intervals for
    historical analysis and reporting.
    """

    __tablename__ = "performance_snapshots"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Snapshot metadata
    snapshot_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)

    # Trade statistics
    total_trades: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    winning_trades: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    losing_trades: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    win_rate: Mapped[Decimal] = mapped_column(Numeric(5, 2), nullable=False, default=0.0)

    # Financial metrics
    total_pnl: Mapped[Decimal] = mapped_column(Numeric(15, 2), nullable=False, default=0.0)
    sharpe_ratio: Mapped[Optional[Decimal]] = mapped_column(Numeric(6, 3), nullable=True)
    max_drawdown: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    average_rr: Mapped[Optional[Decimal]] = mapped_column(Numeric(4, 2), nullable=True)

    # Context
    session: Mapped[Optional[str]] = mapped_column(
        String(20),
        CheckConstraint("session IN ('TOKYO', 'LONDON', 'NY', 'SYDNEY', 'OVERLAP') OR session IS NULL"),
        nullable=True
    )
    parameter_mode: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc)
    )

    # Indexes
    __table_args__ = (
        Index("idx_snapshots_time", "snapshot_time"),
    )

    def __repr__(self) -> str:
        return f"<PerformanceSnapshot(snapshot_time={self.snapshot_time}, total_trades={self.total_trades}, win_rate={self.win_rate})>"


class ParameterHistory(Base):
    """
    Parameter change audit trail.

    Tracks all changes to trading parameters including confidence thresholds,
    risk-reward ratios, and system configuration changes.
    """

    __tablename__ = "parameter_history"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Change metadata
    change_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)
    parameter_mode: Mapped[str] = mapped_column(String(50), nullable=False)

    # Context
    session: Mapped[Optional[str]] = mapped_column(
        String(20),
        CheckConstraint("session IN ('TOKYO', 'LONDON', 'NY', 'SYDNEY', 'OVERLAP') OR session IS NULL"),
        nullable=True
    )

    # Parameter values
    confidence_threshold: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    min_risk_reward: Mapped[Optional[Decimal]] = mapped_column(Numeric(4, 2), nullable=True)

    # Change metadata
    reason: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    changed_by: Mapped[str] = mapped_column(
        String(50),
        CheckConstraint("changed_by IN ('system_auto', 'learning_agent', 'manual', 'emergency')"),
        nullable=False
    )

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc)
    )

    def __repr__(self) -> str:
        return f"<ParameterHistory(change_time={self.change_time}, parameter_mode={self.parameter_mode}, changed_by={self.changed_by})>"


class ShadowTest(Base):
    """
    Shadow test records for parameter optimization experiments.

    Stores metadata and performance metrics for A/B testing of parameter
    changes with 10% signal allocation to test group.
    """

    __tablename__ = "shadow_tests"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Test identification
    test_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False, index=True)
    suggestion_id: Mapped[str] = mapped_column(String(255), nullable=False)

    # Parameter being tested
    parameter_name: Mapped[str] = mapped_column(String(100), nullable=False)
    session: Mapped[Optional[str]] = mapped_column(
        String(20),
        CheckConstraint("session IN ('TOKYO', 'LONDON', 'NY', 'SYDNEY', 'OVERLAP', 'ALL') OR session IS NULL"),
        nullable=True
    )

    # Parameter values
    current_value: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    test_value: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)

    # Test timing
    start_date: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)
    end_date: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    min_duration_days: Mapped[int] = mapped_column(Integer, nullable=False, default=7)

    # Signal allocation
    allocation_pct: Mapped[Decimal] = mapped_column(Numeric(4, 2), nullable=False, default=Decimal("10.0"))

    # Trade counters
    control_trades: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    test_trades: Mapped[int] = mapped_column(Integer, nullable=False, default=0)

    # Performance metrics
    control_win_rate: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    test_win_rate: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    control_avg_rr: Mapped[Optional[Decimal]] = mapped_column(Numeric(4, 2), nullable=True)
    test_avg_rr: Mapped[Optional[Decimal]] = mapped_column(Numeric(4, 2), nullable=True)

    # Evaluation results
    improvement_pct: Mapped[Optional[Decimal]] = mapped_column(Numeric(5, 2), nullable=True)
    p_value: Mapped[Optional[Decimal]] = mapped_column(Numeric(6, 4), nullable=True)

    # Status tracking
    status: Mapped[str] = mapped_column(
        String(20),
        CheckConstraint("status IN ('ACTIVE', 'COMPLETED', 'TERMINATED', 'DEPLOYED')"),
        nullable=False
    )
    termination_reason: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc)
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc)
    )

    # Indexes
    __table_args__ = (
        Index("idx_shadow_tests_status", "status"),
        Index("idx_shadow_tests_start_date", "start_date"),
    )

    def __repr__(self) -> str:
        return f"<ShadowTest(test_id={self.test_id}, parameter={self.parameter_name}, status={self.status})>"
