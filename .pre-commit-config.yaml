repos:
  # Python formatting and linting
  - repo: https://github.com/psf/black
    rev: '24.2.0'
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]
        files: '\.py$'

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: '5.13.2'
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: '\.py$'

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: '7.0.0'
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: '\.py$'

  # TypeScript/JavaScript linting and formatting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: 'v8.56.0'
    hooks:
      - id: eslint
        files: '\.(js|jsx|ts|tsx)$'
        additional_dependencies:
          - eslint@8.56.0
          - eslint-config-next@14.1.0
          - '@typescript-eslint/eslint-plugin@^6.0.0'
          - '@typescript-eslint/parser@^6.0.0'

  # Prettier for code formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: 'v4.0.0-alpha.8'
    hooks:
      - id: prettier
        files: '\.(js|jsx|ts|tsx|json|css|md|yml|yaml)$'
        exclude: 'package-lock\.json'

  # Rust formatting
  - repo: https://github.com/doublify/pre-commit-rust
    rev: 'v1.0'
    hooks:
      - id: fmt
        args: [--manifest-path=execution-engine/Cargo.toml]
      - id: clippy
        args: [--manifest-path=execution-engine/Cargo.toml, --, -D, warnings]

  # General checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: 'v4.5.0'
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
        args: [--maxkb=1024]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: mixed-line-ending

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: 'v2.12.0'
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: 'v1.4.0'
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package-lock.json

  # Commit message format
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 'v3.13.0'
    hooks:
      - id: commitizen
      - id: commitizen-branch
        stages: [push]

  # Custom hooks for critical trading system tests
  - repo: local
    hooks:
      - id: validate-trading-config
        name: Validate Trading Configuration
        entry: python -m agents.config_manager.validator
        language: system
        files: ^config/parameters/.*\.yaml$
        exclude: config/parameters/active\.yaml$
        description: "Validates trading parameter configurations against schema and constraints"

      - id: test-execution-engine
        name: Test Execution Engine Critical Functions
        entry: python test-execution-engine.py
        language: system
        pass_filenames: false
        files: execution-engine/.*\.py$
        description: "Validates execution engine to prevent trading bugs like units_int error"

      - id: run-critical-tests
        name: Run Critical Trading System Tests
        entry: python run_all_tests.py
        language: system
        pass_filenames: false
        stages: [commit]
        description: "Runs comprehensive test suite before commit"

# Configuration
default_language_version:
  python: python3.11
  node: '20.11.0'

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false